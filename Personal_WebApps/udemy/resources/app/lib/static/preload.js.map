{"version":3,"sources":["preload.js"],"names":["INJECT_JS_PATH","path","join","__dirname","log","require","setNotificationCallback","createCallback","clickCallback","OldNotify","window","Notification","newNotify","title","opt","instance","addEventListener","requestPermission","bind","Object","defineProperty","get","permission","injectScripts","needToInject","fs","existsSync","notifyNotificationCreate","ipcRenderer","send","notifyNotificationClick","document","on","event","message","appArgs","JSON","parse","info"],"mappings":";;AAGA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,kBAA/B,CAAvB,C,CAPA;;;;AAQA,IAAMC,MAAMC,QAAQ,UAAR,CAAZ;AACA;;;;;;;AAOA,SAASC,uBAAT,CAAiCC,cAAjC,EAAiDC,aAAjD,EAAgE;AAC9D,MAAMC,YAAYC,OAAOC,YAAzB;AACA,MAAMC,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAChCP,mBAAeM,KAAf,EAAsBC,GAAtB;AACA,QAAMC,WAAW,IAAIN,SAAJ,CAAcI,KAAd,EAAqBC,GAArB,CAAjB;AACAC,aAASC,gBAAT,CAA0B,OAA1B,EAAmCR,aAAnC;AACA,WAAOO,QAAP;AACD,GALD;AAMAH,YAAUK,iBAAV,GAA8BR,UAAUQ,iBAAV,CAA4BC,IAA5B,CAAiCT,SAAjC,CAA9B;AACAU,SAAOC,cAAP,CAAsBR,SAAtB,EAAiC,YAAjC,EAA+C;AAC7CS,SAAK;AAAA,aAAMZ,UAAUa,UAAhB;AAAA;AADwC,GAA/C;;AAIAZ,SAAOC,YAAP,GAAsBC,SAAtB;AACD;;AAED,SAASW,aAAT,GAAyB;AACvB,MAAMC,eAAeC,aAAGC,UAAH,CAAc1B,cAAd,CAArB;AACA,MAAI,CAACwB,YAAL,EAAmB;AACjB;AACD;AACD;AACA;AACAnB,UAAQL,cAAR;AACD;;AAED,SAAS2B,wBAAT,CAAkCd,KAAlC,EAAyCC,GAAzC,EAA8C;AAC5Cc,wBAAYC,IAAZ,CAAiB,cAAjB,EAAiChB,KAAjC,EAAwCC,GAAxC;AACD;AACD,SAASgB,uBAAT,GAAmC;AACjCF,wBAAYC,IAAZ,CAAiB,oBAAjB;AACD;;AAEDvB,wBAAwBqB,wBAAxB,EAAkDG,uBAAlD;;AAEAC,SAASf,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAClDO;AACD,CAFD;;AAIAK,sBAAYI,EAAZ,CAAe,QAAf,EAAyB,UAACC,KAAD,EAAQC,OAAR,EAAoB;AAC3C,MAAMC,UAAUC,KAAKC,KAAL,CAAWH,OAAX,CAAhB;AACA9B,MAAIkC,IAAJ,CAAS,iBAAT,EAA4BH,OAA5B;AACD,CAHD;;AAKAP,sBAAYI,EAAZ,CAAe,OAAf,EAAwB,UAACC,KAAD,EAAQC,OAAR,EAAoB;AAC1C;AACA9B,MAAIkC,IAAJ,CAAS,QAAT,EAAmBJ,OAAnB;AACD,CAHD","file":"preload.js","sourcesContent":["/**\n Preload file that will be executed in the renderer process\n */\nimport { ipcRenderer } from 'electron';\nimport path from 'path';\nimport fs from 'fs';\n\nconst INJECT_JS_PATH = path.join(__dirname, '../../', 'inject/inject.js');\nconst log = require('loglevel');\n/**\n * Patches window.Notification to:\n * - set a callback on a new Notification\n * - set a callback for clicks on notifications\n * @param createCallback\n * @param clickCallback\n */\nfunction setNotificationCallback(createCallback, clickCallback) {\n  const OldNotify = window.Notification;\n  const newNotify = (title, opt) => {\n    createCallback(title, opt);\n    const instance = new OldNotify(title, opt);\n    instance.addEventListener('click', clickCallback);\n    return instance;\n  };\n  newNotify.requestPermission = OldNotify.requestPermission.bind(OldNotify);\n  Object.defineProperty(newNotify, 'permission', {\n    get: () => OldNotify.permission,\n  });\n\n  window.Notification = newNotify;\n}\n\nfunction injectScripts() {\n  const needToInject = fs.existsSync(INJECT_JS_PATH);\n  if (!needToInject) {\n    return;\n  }\n  // Dynamically require scripts\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  require(INJECT_JS_PATH);\n}\n\nfunction notifyNotificationCreate(title, opt) {\n  ipcRenderer.send('notification', title, opt);\n}\nfunction notifyNotificationClick() {\n  ipcRenderer.send('notification-click');\n}\n\nsetNotificationCallback(notifyNotificationCreate, notifyNotificationClick);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  injectScripts();\n});\n\nipcRenderer.on('params', (event, message) => {\n  const appArgs = JSON.parse(message);\n  log.info('nativefier.json', appArgs);\n});\n\nipcRenderer.on('debug', (event, message) => {\n  // eslint-disable-next-line no-console\n  log.info('debug:', message);\n});\n"]}